{"version":3,"sources":["webpack:///./client/components/Loader.js","webpack:///./client/pages/ResetPassword.js","webpack:///./client/shared/TextError.js"],"names":["props","color","ResetPassword","dispatch","useDispatch","useState","showLoader","setShowLoader","resetEmail","setResetEmail","passResetCode","sePassResetCode","codeVerified","setCodeVerified","useEffect","email","storage","get","history","replace","verifySubmitHandler","value","resetCode","body","checkPasswordResetCode","onSuccess","onEnd","resendResetEmail","resendPasswordResetEmail","toast","success","onError","err","console","log","renderVerifyForm","Yup","min","max","required","TextError","backgroundColor","borderColor","padding","resetPasswordHandler","values","verificationCode","resetMyPassword","res","setLoginModalVisibility","renderResetForm","password","confirmPassword","oneOf","renderLoader","marginTop","paddingTop","cursor","children"],"mappings":"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","file":"pages-ResetPassword.25f71f3a11ee74e4ee2d.js","sourcesContent":["import React from \"react\";\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\n\r\nexport default (props) => {\r\n  const { color = \"#00acf0\" } = props;\r\n  return <BounceLoader color={color} />;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nimport { Card } from \"react-bootstrap\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport TextError from \"../shared/TextError\";\r\n\r\nimport LogoImage from \"../assets/temp/logo.png\";\r\nimport Loader from \"../components/Loader\";\r\nimport { toast } from \"react-toastify\";\r\nimport ToastBody from \"../components/ToastBody\";\r\nimport storage from \"../services/storage\";\r\nimport { handleErrors } from \"../helpers/error\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { setLoginModalVisibility } from \"../store/ui/loginModal\";\r\nimport {\r\n  checkPasswordResetCode,\r\n  resetMyPassword,\r\n  resendPasswordResetEmail,\r\n} from \"../store/api/auth\";\r\n\r\nconst ResetPassword = (props) => {\r\n  const dispatch = useDispatch();\r\n  const [showLoader, setShowLoader] = useState(false);\r\n  const [resetEmail, setResetEmail] = useState(\"\");\r\n  const [passResetCode, sePassResetCode] = useState(\"\");\r\n\r\n  const [codeVerified, setCodeVerified] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const email = storage.get(\"password_reset_email\");\r\n    if (!email) this.props.history.replace(\"/\");\r\n\r\n    setResetEmail(email);\r\n  }, []);\r\n\r\n  const verifySubmitHandler = (value) => {\r\n    setShowLoader(true);\r\n    sePassResetCode(value.resetCode);\r\n    const body = {\r\n      email: resetEmail,\r\n      resetCode: value.resetCode,\r\n    };\r\n    dispatch(\r\n      checkPasswordResetCode({\r\n        body,\r\n        onSuccess: () => {\r\n          setCodeVerified(true);\r\n        },\r\n        onEnd: () => {\r\n          setShowLoader(false);\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const resendResetEmail = () => {\r\n    setShowLoader(true);\r\n    dispatch(\r\n      resendPasswordResetEmail({\r\n        body: {\r\n          email: resetEmail,\r\n        },\r\n        onSuccess: () => {\r\n          toast.success(\r\n            <ToastBody\r\n              title=\"Email Sent\"\r\n              message=\"We have sent you another password reset email\"\r\n            />\r\n          );\r\n        },\r\n        onError: (err) => {\r\n          console.log(\"Error  skfjsdfhsdjhf\", err);\r\n        },\r\n        onEnd: () => {\r\n          setShowLoader(false);\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const renderVerifyForm = () => {\r\n    return (\r\n      <Formik\r\n        initialValues={{ resetCode: \"\" }}\r\n        onSubmit={verifySubmitHandler}\r\n        validationSchema={Yup.object({\r\n          resetCode: Yup.string()\r\n            .min(6, \"Reset Code must be 6 characters long\")\r\n            .max(6, \"Reset Code must be 6 characters long\")\r\n            .required(\"Enter Reset Code\"),\r\n        })}\r\n      >\r\n        {({}) => {\r\n          return (\r\n            <Form>\r\n              <div className=\"form-group\">\r\n                <div className=\"covering\">\r\n                  <Field\r\n                    type=\"text\"\r\n                    className=\"form-control border\"\r\n                    placeholder=\"Enter 6 Digit Reset Code\"\r\n                    name=\"resetCode\"\r\n                  />\r\n                  <ErrorMessage name=\"resetCode\" component={TextError} />\r\n                </div>\r\n              </div>\r\n\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block \"\r\n                style={{\r\n                  backgroundColor: \"#00acf0\",\r\n                  borderColor: \"#00acf0\",\r\n                  padding: \"10px 10px\",\r\n                }}\r\n              >\r\n                Next\r\n              </button>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    );\r\n  };\r\n\r\n  const resetPasswordHandler = (values) => {\r\n    setShowLoader(true);\r\n    const body = {\r\n      email: resetEmail,\r\n      verificationCode: passResetCode,\r\n      ...values,\r\n    };\r\n\r\n    dispatch(\r\n      resetMyPassword({\r\n        body,\r\n        onSuccess: (res) => {\r\n          toast.success(\r\n            <ToastBody\r\n              title=\"Password Changed\"\r\n              message=\"your password has been changed.\"\r\n            />\r\n          );\r\n          props.history.replace(\"/\");\r\n          dispatch(setLoginModalVisibility(true));\r\n        },\r\n        onEnd: () => {\r\n          setShowLoader(false);\r\n        },\r\n      })\r\n    );\r\n  };\r\n  const renderResetForm = () => {\r\n    return (\r\n      <Formik\r\n        initialValues={{ password: \"\", confirmPassword: \"\" }}\r\n        onSubmit={resetPasswordHandler}\r\n        validationSchema={Yup.object({\r\n          password: Yup.string()\r\n            .required(\"Enter a password*\")\r\n            .min(6, \"minimum 6 chars*\"),\r\n          confirmPassword: Yup.string()\r\n            .required(\"Required*\")\r\n            .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\"),\r\n        })}\r\n      >\r\n        {({}) => {\r\n          return (\r\n            <Form>\r\n              <div className=\"form-group\">\r\n                <div className=\"covering\">\r\n                  <Field\r\n                    type=\"password\"\r\n                    className=\"form-control border\"\r\n                    placeholder=\"New Password\"\r\n                    name=\"password\"\r\n                  />\r\n                  <ErrorMessage name=\"password\" component={TextError} />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"form-group\">\r\n                <div className=\"covering\">\r\n                  <Field\r\n                    type=\"password\"\r\n                    className=\"form-control border\"\r\n                    placeholder=\"Confirm New Password\"\r\n                    name=\"confirmPassword\"\r\n                  />\r\n                  <ErrorMessage name=\"confirmPassword\" component={TextError} />\r\n                </div>\r\n              </div>\r\n\r\n              <button\r\n                type=\"submit\"\r\n                className=\"btn btn-primary btn-block \"\r\n                style={{\r\n                  backgroundColor: \"#00acf0\",\r\n                  borderColor: \"#00acf0\",\r\n                  padding: \"10px 10px\",\r\n                }}\r\n              >\r\n                Reset\r\n              </button>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    );\r\n  };\r\n\r\n  const renderLoader = () => {\r\n    return (\r\n      <div className=\"overlapping-loader\">\r\n        <Loader />\r\n      </div>\r\n    );\r\n  };\r\n  return (\r\n    <div style={{ marginTop: \"10px\", paddingTop: \"228px\" }}>\r\n      <div className=\"container\">\r\n        <div className=\"py-5 verify-email-form-wrapper\">\r\n          <Card className=\"verify-email-form shadow p-4 position-relative\">\r\n            {showLoader && renderLoader()}\r\n            <h3 className=\"text-center mb-3\">Reset Password</h3>\r\n            {!codeVerified && renderVerifyForm()}\r\n            {codeVerified && renderResetForm()}\r\n            {!codeVerified && (\r\n              <p className=\"mt-3 mb-0 resend-text text-muted\">\r\n                We have sent you a password reset code to your email address,\r\n                Please check your junk/spam folder as well. If you haven't\r\n                recieved any email click{\" \"}\r\n                <a onClick={resendResetEmail} style={{ cursor: \"pointer\" }}>\r\n                  <strong>Resend</strong>\r\n                </a>\r\n                .\r\n              </p>\r\n            )}\r\n          </Card>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React from \"react\";\r\n\r\nfunction TextError(props) {\r\n  return (\r\n    <>{props.children && <div className=\"error mr-3\">{props.children}</div>}</>\r\n  );\r\n}\r\n\r\nexport default TextError;\r\n"],"sourceRoot":""}